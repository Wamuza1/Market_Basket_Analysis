knitr::opts_chunk$set(echo = TRUE)
# Clear environment
rm(list = ls())
# Clear console
cat("\014")  # ctrl+L
#autinsurance <- read.csv(file.choose())
autinsurance <- read.csv('insurance_claims.csv')
# Clear environment
rm(list = ls())
# Clear console
cat("\014")  # ctrl+L
# Clear environment
rm(list = ls())
# Clear console
cat("\014")  # ctrl+L
library(ggplot2)
library(stringr)
library(tidyr)
library(dplyr)
library(gridExtra)
library(caret)
library(pROC)
library(psych)
library(knitr)
library(plyr)
library(corrplot)
library(caret)
library(gridExtra)
library(scales)
library(Rmisc)
packneeded <- c("ggplot2","stringr","tidyr","dplyr","gridExtra","caret","pROC","psych","knitr","plyr","corrplot","caret","gridExtra","scales","Rmisc","ggrepel","randomForest","xgboost","moments",)
packneeded <- c("ggplot2","stringr","tidyr","dplyr","gridExtra","caret","pROC","psych","knitr","plyr","corrplot","caret","gridExtra","scales","Rmisc","ggrepel","randomForest","xgboost","moments",)
# Clear environment
rm(list = ls())
# Clear console
cat("\014")  # ctrl+L
# Clear environment
rm(list = ls())
# Clear console
cat("\014")  # ctrl+L
#autinsurance <- read.csv(file.choose())
autinsurance <- read.csv('insurance_claims.csv')
setwd("~/Rutgers_bootCamp/BBDS_Project/Market_Basket_Analysis/R_Code/Apriori_in_R")
detwd()
getwd()
knitr::opts_chunk$set(echo = TRUE)
# Clear environment
rm(list = ls())
# Clear packSalarys
# pacman::p_unload(rgl)
# Clear plots
# dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
Trans = read.csv(file.choose(), header = FALSE)# Locate data file, summarize, attach
str(Trans) # structure
names(Trans) # variable names
attributes(Trans)
attributes(Trans)[1]
dim (Trans) # dimensions
nrow(Trans) # number of observations
dim (Trans)[1]
ncol(Trans) # number of variables
duplicated(Trans)
anyDuplicated(Trans)
anyDuplicated(Trans, fromLast = TRUE)
#install.packages('arules')
library(arules)
#read.transactions(file.choose())
Trans2 = read.transactions(file.choose(), sep = ',', rm.duplicates = TRUE)
View(Trans2)
View(Trans2)
#install.packages('arules')
library(arules)
#read.transactions(file.choose())
Trans2 = read.transactions(file.choose(), sep = ',', rm.duplicates = TRUE)
summary(Trans2)
#itemFrequencyPlot()
itemFrequencyPlot(Trans2, topN = 10)
(3*7)/7500
rules = apriori(data = Trans2, parameter = list(support = 0.004, confidence = 0.2))
# read.transactions()
# itemFrequencyPlot()
#
# inspect()
inspect(sort(rules, by = 'confidence')[1:200])
#Alternative to inspect() is to convert rules to a dataframe and then use View()
df_basket <- as(rules,"data.frame")
View(df_basket)
library(arulesViz)
# read.transactions()
# itemFrequencyPlot()
#
# inspect()
inspect(sort(rules, by = 'confidence')[1:200])
#Alternative to inspect() is to convert rules to a dataframe and then use View()
df_basket <- as(rules,"data.frame")
View(df_basket)
rules = apriori(data = Trans2, parameter = list(support = 0.004, confidence = 0.2))
#Alternative to inspect() is to convert rules to a dataframe and then use View()
df_basket <- as(rules,"data.frame")
View(df_basket)
rules = apriori(data = Trans2, parameter = list(support = 0.001, confidence = 0.04))
rules = apriori(data = Trans2, parameter = list(support = 0.001, confidence = 0.04))
# read.transactions()
# itemFrequencyPlot()
#
# inspect()
inspect(sort(rules, by = 'confidence')[1:200])
library(arulesViz)
plot(rules, method="graph", control=list(type="items"))
# plot(rules[1:20], measure=c("support","lift"),shading="confidence",engine='interactive')
subRules<-rules[quality(rules)$confidence>0.4]
#Plot SubRules
plot(subRules)
plot(subRules,method="two-key plot")
# plotly_arules(subRules)
top10subRules <- head(subRules, n = 10, by = "confidence")
View(Trans2)
View(Trans)
View(subRules)
# plotly_arules(subRules)
# plot(top10subRules, method = "graph",  engine = "htmlwidget")
# Filter top 20 rules with highest lift
subRules2<-head(subRules, n=20, by="lift")
plot(subRules2, method="paracoord")
plot(rules, method = "grouped", control = list(k = 5))
# rules <- apriori(Trans, parameter=list(support=0.001, confidence=0.2))
# rules
rules
plot(rules)
install.packages("arulesViz")
library(arulesViz)
install.packages("arulesViz")
library(arulesViz)
plot(rules, method="graph", control=list(type="items"))
#install.packages("arulesViz")
library(arulesViz)
plot(rules, method="graph", control=list(type="items"))
subRules<-rules[quality(rules)$confidence>0.4]
#Plot SubRules
plot(subRules)
plot(subRules,method="two-key plot")
top10subRules <- head(subRules, n = 10, by = "confidence")
top10subRules <- head(subRules, n = 10, by = "confidence")
top10subRules
knitr::opts_chunk$set(echo = TRUE)
# Clear environment
rm(list = ls())
# Clear packSalarys
# pacman::p_unload(rgl)
# Clear plots
# dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# install.packages(c("digest", "evaluate", "formatR", "highlight", "knitr",
#   "parser", "plyr", "Rcpp", "stringr"))
Trans = read.csv(file.choose(), header = FALSE)# Locate data file, summarize, attach
str(Trans) # structure
names(Trans) # variable names
attributes(Trans)
attributes(Trans)[1]
dim (Trans) # dimensions
nrow(Trans) # number of observations
dim (Trans)[1]
ncol(Trans) # number of variables
summary(Trans)
duplicated(Trans)
anyDuplicated(Trans)
anyDuplicated(Trans, fromLast = TRUE)
#install.packages('arules')
library(arules)
#read.transactions(file.choose())
Trans2 = read.transactions(file.choose(), sep = ',', rm.duplicates = TRUE)
summary(Trans2)
#itemFrequencyPlot()
itemFrequencyPlot(Trans2, topN = 10)
(3*7)/7500
rules = apriori(data = Trans2, parameter = list(support = 0.001, confidence = 0.04))
# read.transactions()
# itemFrequencyPlot()
#
# inspect()
inspect(sort(rules, by = 'confidence')[1:200])
#Alternative to inspect() is to convert rules to a dataframe and then use View()
df_basket <- as(rules,"data.frame")
View(df_basket)
#install.packages("arulesViz")
library(arulesViz)
plot(rules, method="graph", control=list(type="items"))
# plot(rules[1:20], measure=c("support","lift"),shading="confidence",engine='interactive')
# arulesViz::plotly_arules(rules)
subRules<-rules[quality(rules)$confidence>0.4]
#Plot SubRules
plot(subRules)
plot(subRules,method="two-key plot")
# plotly_arules(subRules)
top10subRules <- head(subRules, n = 10, by = "confidence")
top10subRules
# plot(top10subRules, method = "graph",  engine = "htmlwidget")
# saveAsGraph(head(subRules, n = 1000, by = "lift"), file = "rules.graphml")
# Filter top 20 rules with highest lift
subRules2<-head(subRules, n=20, by="lift")
plot(subRules2, method="paracoord")
plot(rules, method = "grouped", control = list(k = 5))
# data(Groceries)
# rules <- apriori(Trans, parameter=list(support=0.001, confidence=0.2))
# rules
rules
plot(rules)
library(colorspace) # for sequential_hcl
plot(rules, control = list(col=sequential_hcl(100)))
plot(rules, col=sequential_hcl(100))
plot(rules, col=grey.colors(50, alpha =.8))
plot(rules, measure = c("support", "lift"), shading = "confidence", jitter = 2)
plot(rules, verbose = TRUE, jitter = 0)
library(ggplot2)
plot(rules, engine = "ggplot2")
plot(rules, engine = "ggplot2") +
scale_color_gradient2(low = "red", mid = "white", high = "blue",
midpoint = 1, limits = c(0,12)) +
ggtitle("Scatterplot") +
theme_linedraw()
# sel <- plot(rules, engine = "interactive")
# plot(rules, engine = "htmlwidget", jitter = 200)
plot(rules, method = "two-key plot", jitter = 0)
subrules <- subset(rules, lift>3)
subrules
#plot 7
plot(subrules, method="matrix")
plot(subrules, method="matrix", engine = "3d")
plot(subrules, method="matrix", shading=c("lift", "confidence"))
